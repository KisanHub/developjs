# This file is part of developjs. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/KisanHub/developjs/master/COPYRIGHT. No part of developjs, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of developjs. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/KisanHub/developjs/master/COPYRIGHT.


developjs_module_setVariables()
{
	developjs_moduleName="$core_variable_array_element"
	developjs_moduleFilePath="$developjs_modulePath"/"$developjs_moduleName"/module.json
	developjs_outputFilePath="$developjs_outputPath"/"$developjs_moduleName".js
}

developjs_module_validate()
{
	core_validate_filePathReadable "$core_commandLine_exitCode_USAGE" "non-option" "modules" "$developjs_moduleFilePath"
}

core_dependency_requires '*' rm
developjs_module_checkIfCanOverwrite()
{
	if [ -e "$developjs_outputFilePath" ]; then
		if core_variable_isTrue "$developjs_force"; then
			rm -rf "$developjs_outputFilePath"
		else
			core_exitError $core_commandLine_exitCode_CANTCREAT "Can not overwrite existing file '$developjs_outputFilePath'; please specify --force to do so"
		fi
	fi
}

core_dependency_requires '*' cat
core_usesIn jsonreader
developjs_module_createOutputFilePath()
{
	{
		printf '/*\n'
		
		cat "$developjs_copyrightFile"
		printf '\n'
		
		printf '*/\n\n\n'
	
		jsonreader_parse "$developjs_moduleFilePath" developjs_module_parseJson_callback
	} >>"$developjs_outputFilePath"
}

core_dependency_requires '*' sed
developjs_module_parseJson_callback()
{
    case "$eventKind" in

        root)
			core_exitError $core_commandLine_exitCode_DATAERR "Did not expect anything but object for root in JSON for module '$developjs_moduleName'"
        ;;

        object)

            case "$eventVariant" in

                start)
					:
                ;;
				
				boolean|number)
					core_exitError $core_commandLine_exitCode_DATAERR "Did not expect boolean or number in JSON object for module '$developjs_moduleName'"
				;;

                string)
					:
                ;;

                end)
					:
                ;;

            esac

        ;;

        array)

            case "$eventVariant" in

                start)
	                if [ "$eventValue" = 'object' ]; then
	                   developjs_module_createModule "$(printf '%s' "$(core_variable_allButFirst "$jsonreader_path")" | sed -r -e 's/:[0-9]*//g' -e 's;/;.;g')"
	                fi
                ;;

                boolean|number)
					core_exitError $core_commandLine_exitCode_DATAERR "Did not expect boolean or number in JSON object for module '$developjs_moduleName'"
                ;;
				
				string)
					developjs_module_appendJavaScriptFile "$(printf '%s' "$jsonreader_path" | sed -r -e 's/:[0-9]+//g')" "$eventValue"
				;;

                end)
					:
                ;;

            esac

        ;;

    esac
}

core_dependency_requires '*' tr
developjs_module_createModule()
{
	local submoduleName="$1"
	
	if [ "$(printf '%s' "$submoduleName" | tr -d '.')" = "$submoduleName" ]; then
		cat <<-EOF
			var ${submoduleName} = (function(module)
			{
				return module
			})(${submoduleName} || {}));
		EOF
	else
		cat <<-EOF
			${submoduleName} = (function(module)
			{
				return module
			})(${submoduleName} || {}));
		EOF
	fi
}

core_dependency_requires '*' sed
developjs_module_appendJavaScriptFile()
{
	local javaScriptRelativeParentPath="$1"
	local javaScriptFileExtensionlessName="$2"
	local javaScriptRelativeFilePath="$1"/"$2"
	local javaScriptFilePath="${developjs_modulePath}${javaScriptRelativeFilePath}".js
	
	local globalObject="$(printf '%s' "$(core_variable_allButFirst "$javaScriptRelativeParentPath")" | sed -r 's;/;\.;g')"
	printf '// %s \n\n' "$javaScriptRelativeFilePath".js
	printf '"use strict";\n'
	printf '%s = (function(module){\n' "$globalObject"
	
	cat "$javaScriptFilePath"
	printf '\n'
	
	printf 'return module\n'
	printf '}(%s || {}));\n' "$globalObject"
}
